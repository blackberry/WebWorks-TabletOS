<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Identity Namespace Tests</title>
        <script type="text/javascript" src="yui_js/yui_base_min.js"></script>
		<script type="text/javascript" src="yui_js/dump_min.js"></script>
		<script type="text/javascript" src="yui_js/substitute_min.js"></script>
		<script type="text/javascript" src="yui_js/oop_min.js"></script>
		<script type="text/javascript" src="yui_js/dom_min.js"></script>
		<script type="text/javascript" src="yui_js/yui_later_min.js"></script>
		<script type="text/javascript" src="yui_js/event_custom_base_min.js"></script>
		<script type="text/javascript" src="yui_js/event_base_min.js"></script>
		<script type="text/javascript" src="yui_js/pluginhost_min.js"></script>
		<script type="text/javascript" src="yui_js/node_min.js"></script>
		<script type="text/javascript" src="yui_js/event_delegate_min.js"></script>
		<script type="text/javascript" src="yui_js/json_min.js"></script>
		<script type="text/javascript" src="yui_js/event_simulate_min.js"></script>
		<script type="text/javascript" src="yui_js/test_min.js"></script>
		
		<script src="rim_yui_wrapper.js" type="text/javascript"></script>
                
        <script type="text/javascript">
            var testing = blackberry.tests;
            testing.setupFramework(generateTestCaseCallback);
                     
            //We're passing in the Y parameter and expecting back an array of test cases
            function generateTestCaseCallback(Y){
                var testCases = new Array();
                var Assert = Y.Assert;
                
                testCases["suiteName"] = "blackberry.identity Tests";
                
                //---------------------------------------------------------------------
                // Test methods - names must begin with "test"
                // or to contain the word "should" when a "friendly name" is used
                //---------------------------------------------------------------------
                
                
                testCases[0] = new Y.Test.Case({
                    name: "blackberry.identity tests",
					
					setUp : function () {
						//Setup code goes here
					},
				 
					tearDown : function () {
						//Teardown code goes here
					},
					
					"blackberry.identity namespace should exist" : function() {
						Assert.isNotUndefined(blackberry.identity);
					},                 
                });
				
				testCases[1] = new Y.Test.Case({
					name: "blackberry.identity.getServiceList tests",
					
					_should: {
						error: {
						"blackberry.identity.getServiceList(null) should throw an error" : "java.lang.IllegalArgumentException: Too many arguments",																					
						"blackberry.identity.getServiceList(undefined) should throw an error" : "java.lang.IllegalArgumentException: Too many arguments",																					
						"blackberry.identity.getServiceList('invalid') should throw an error" : "java.lang.IllegalArgumentException: Too many arguments",																					
						}
					},
				
					setUp : function () {
						//Setup code goes here
					},
				 
					tearDown : function () {
						//Teardown code goes here
					},
					
					"blackberry.identity.getServiceList() should exist" : function() {
						Assert.isNotUndefined(blackberry.identity.getServiceList);
					},
					
					"blackberry.identity.getServiceList() should return services" : function() {
						var services = blackberry.identity.getServiceList();
						Assert.isNotUndefined (services);
						Assert.areNotEqual(services.length, 0);						
					},
					
					"blackberry.identity.getServiceList(null) should throw an error": function() {
						try {
							blackberry.identity.getServiceList(null);
						}
						catch (e){
							throw new Error (e);
						}						
					},
					
					"blackberry.identity.getServiceList(undefined) should throw an error" : function() {						
						try {
							blackberry.identity.getServiceList(undefined);
						}
						catch (e){
							throw new Error (e);
						}
						
						testing.ExecuteAndCastException(blackberry.identity.getServiceList, undefined);
					},
					
					"blackberry.identity.getServiceList('invalid') should throw an error" : function() {
						try {
							blackberry.identity.getServiceList("invalid");
						}
						catch (e){
							throw new Error (e);
						}
					},
				});
                
                return testCases;
            }
        </script>
    </head>
    <body>
        <div id="output" />
    </body>
</html>