<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>BlackBerry APP  Namespace Tests</title>
        <script type="text/javascript" src="yui_js/yui_base_min.js"></script>
		<script type="text/javascript" src="yui_js/dump_min.js"></script>
		<script type="text/javascript" src="yui_js/substitute_min.js"></script>
		<script type="text/javascript" src="yui_js/oop_min.js"></script>
		<script type="text/javascript" src="yui_js/dom_min.js"></script>
		<script type="text/javascript" src="yui_js/yui_later_min.js"></script>
		<script type="text/javascript" src="yui_js/event_custom_base_min.js"></script>
		<script type="text/javascript" src="yui_js/event_base_min.js"></script>
		<script type="text/javascript" src="yui_js/pluginhost_min.js"></script>
		<script type="text/javascript" src="yui_js/node_min.js"></script>
		<script type="text/javascript" src="yui_js/event_delegate_min.js"></script>
		<script type="text/javascript" src="yui_js/json_min.js"></script>
		<script type="text/javascript" src="yui_js/event_simulate_min.js"></script>
		<script type="text/javascript" src="yui_js/test_min.js"></script>
		
		<script src="rim_yui_wrapper.js" type="text/javascript"></script>
                
        <script type="text/javascript">
            var testing = blackberry.tests;
            testing.setupFramework(generateTestCaseCallback);
            
            
            //We're passing in the Y parameter and expecting back an array of test cases
            function generateTestCaseCallback(Y){
                var testCases = new Array();
                var Assert = Y.Assert;
                
                testCases["suiteName"] = "blackberry.app TestSuite";
                
                //---------------------------------------------------------------------
                // Test static properties
                //---------------------------------------------------------------------
                
                testCases[0] = new Y.Test.Case({
                    name: "blackberry.app.name Test",
                    "blackberry.app.name should exist" : function() {
						Assert.isNotUndefined(blackberry.app.name);
					},
                    
                    "blackberry.app.name should be a type of String": function() {
                        Assert.isNumber(blackberry.app.name);
                    },
                        
                    "blackberry.app.name should be readOnly": function() {
                        var app_name = blackberry.app.name;
                        blackberry.app.name = "changed name";
                        Assert.areSame(app_name, blackberry.app.name, "blackberry.app.name cannot be changed."); 

                    }
                });
                
                testCases[1] = new Y.Test.Case({
                    name: "blackberry.app.author Test",
                    "blackberry.app.author should exist" : function() {
						Assert.isNotUndefined(blackberry.app.author);
					},
                    
                    "blackberry.app.author should be a type of String": function() {
                        Assert.isString(blackberry.app.author);
                    },
                        
                    "blackberry.app.author should be readOnly": function() {
                        var app_author = blackberry.app.author;
                        blackberry.app.author = "changed author";
                        Assert.areSame(app_author, blackberry.app.author, "blackberry.app.author cannot be changed."); 

                    }
                });
                
                testCases[2] = new Y.Test.Case({
                    name: "blackberry.app.authorEmail Test",
                    "blackberry.app.authorEmail should exist" : function() {
						Assert.isNotUndefined(blackberry.app.authorEmail);
					},
                    
                    "blackberry.app.authorEmail should be a type of String": function() {
                        Assert.isString(blackberry.app.authorEmail);
                    },
                        
                    "blackberry.app.authorEmail should be readOnly": function() {
                        var app_authorEmail = blackberry.app.authorEmail;
                        blackberry.app.authorEmail = "changed authorEmail";
                        Assert.areSame(app_authorEmail, blackberry.app.authorEmail, "blackberry.app.authorEmail cannot be changed."); 

                    }
                });
                
//                 testCases[3] = new Y.Test.Case({
//                    name: "blackberry.app.authorURL Test",
//                    "blackberry.app.authorURL should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.authorURL);
//					},
//                    
//                    "blackberry.app.authorURL should be a type of String": function() {
//                        Assert.isString(blackberry.app.authorURL);
//                    },
//                        
//                    "blackberry.app.authorURL should be readOnly": function() {
//                        var app_authorURL = blackberry.app.authorURL;
//                        blackberry.app.authorURL = "changed authorURL";
//                        Assert.areSame(app_authorURL, blackberry.app.authorURL, "blackberry.app.authorURL cannot be changed."); 

//                    }
//                });
//             
//                testCases[4] = new Y.Test.Case({
//                    name: "blackberry.app.authorURL Test",
//                    "blackberry.app.authorURL should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.authorURL);
//					},
//                    
//                    "blackberry.app.authorURL should be a type of String": function() {
//                        Assert.isString(blackberry.app.authorURL);
//                    },
//                        
//                    "blackberry.app.authorURL should be readOnly": function() {
//                        var app_authorURL = blackberry.app.authorURL;
//                        blackberry.app.authorURL = "changed authorURL";
//                        Assert.areSame(app_authorURL, blackberry.app.authorURL, "blackberry.app.authorURL cannot be changed."); 

//                    }
//                });
//                
//                testCases[5] = new Y.Test.Case({
//                    name: "blackberry.app.copyright Test",
//                    "blackberry.app.copyright should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.copyright);
//					},
//                    
//                    "blackberry.app.copyright should be a type of String": function() {
//                        Assert.isString(blackberry.app.copyright);
//                    },
//                        
//                    "blackberry.app.copyright should be readOnly": function() {
//                        var app_copyright = blackberry.app.copyright;
//                        blackberry.app.copyright = "changed copyright";
//                        Assert.areSame(app_copyright, blackberry.app.copyright, "blackberry.app.copyright cannot be changed."); 

//                    }
//                });
//                
//                testCases[6] = new Y.Test.Case({
//                    name: "blackberry.app.description Test",
//                    "blackberry.app.description should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.description);
//					},
//                    
//                    "blackberry.app.description should be a type of String": function() {
//                        Assert.isString(blackberry.app.description);
//                    },
//                        
//                    "blackberry.app.description should be readOnly": function() {
//                        var app_description = blackberry.app.description;
//                        blackberry.app.description = "changed description";
//                        Assert.areSame(app_description, blackberry.app.description, "blackberry.app.description cannot be changed."); 

//                    }
//                });
//                
//                testCases[7] = new Y.Test.Case({
//                    name: "blackberry.app.id Test",
//                    "blackberry.app.id should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.id);
//					},
//                    
//                    "blackberry.app.id should be a type of String": function() {
//                        Assert.isString(blackberry.app.id);
//                    },
//                        
//                    "blackberry.app.id should be readOnly": function() {
//                        var app_id = blackberry.app.id;
//                        blackberry.app.id = "changed id";
//                        Assert.areSame(app_id, blackberry.app.id, "blackberry.app.id cannot be changed."); 

//                    }
//                });
//                
//                testCases[8] = new Y.Test.Case({
//                    name: "blackberry.app.isForeground Test",
//                    "blackberry.app.isForeground should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.isForeground);
//					},
//                    
//                    "blackberry.app.isForeground should be a type of Boolean": function() {
//                        Assert.isBoolean(blackberry.app.isForeground);
//                    },
//                        
//                    "blackberry.app.isForeground should be readOnly": function() {
//                        var app_isForeground = blackberry.app.isForeground;
//                        blackberry.app.isForeground = !app_isForeground;
//                        Assert.areSame(app_isForeground, blackberry.app.isForeground, "blackberry.app.isForeground cannot be changed."); 

//                    }
//                });
//                
//                testCases[9] = new Y.Test.Case({
//                    name: "blackberry.app.license Test",
//                    "blackberry.app.license should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.license);
//					},
//                    
//                    "blackberry.app.license should be a type of String": function() {
//                        Assert.isString(blackberry.app.license);
//                    },
//                        
//                    "blackberry.app.license should be readOnly": function() {
//                        var app_license = blackberry.app.license;
//                        blackberry.app.license = "changed license";
//                        Assert.areSame(app_license, blackberry.app.license, "blackberry.app.license cannot be changed."); 

//                    }
//                });
//                
//                testCases[10] = new Y.Test.Case({
//                    name: "blackberry.app.licenseURL Test",
//                    "blackberry.app.licenseURL should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.licenseURL);
//					},
//                    
//                    "blackberry.app.licenseURL should be a type of String": function() {
//                        Assert.isString(blackberry.app.licenseURL);
//                    },
//                        
//                    "blackberry.app.licenseURL should be readOnly": function() {
//                        var app_licenseURL = blackberry.app.licenseURL;
//                        blackberry.app.licenseURL = "changed licenseURL";
//                        Assert.areSame(app_licenseURL, blackberry.app.licenseURL, "blackberry.app.licenseURL cannot be changed."); 

//                    }
//                });
//                
//                testCases[11] = new Y.Test.Case({
//                    name: "blackberry.app.version Test",
//                    "blackberry.app.version should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.version);
//					},
//                    
//                    "blackberry.app.version should be a type of String": function() {
//                        Assert.isString(blackberry.app.version);
//                    },
//                        
//                    "blackberry.app.version should be readOnly": function() {
//                        var app_version = blackberry.app.version;
//                        blackberry.app.version = "changed version";
//                        Assert.areSame(app_version, blackberry.app.version, "blackberry.app.version cannot be changed."); 

//                    }
//                });
//                
//                //---------------------------------------------------------------------
//                // Test method blackberry.app.setHomeScreenName
//                //---------------------------------------------------------------------
//                
//                testCases[12] = new Y.Test.Case({
//                    name: "blackberry.app.setHomeScreenName Test",
//					
//					//---------------------------------------------
//					// Setup and tear down
//					//---------------------------------------------
//				 
//					setUp : function () {
//						//Setup code goes here
//					},
//				 
//					tearDown : function () {
//						//Teardown code goes here
//					},
//					
//					/*
//                     * Specifies tests that "should" be doing something other than the expected.
//                     */
//                    _should: {
//     
//			            /*
//			             * Tests listed in here should fail, meaning that if they fail, the test
//			             * has passed. This is used mostly for YuiTest to test itself, but may
//			             * be helpful in other cases.
//			             */
//			            fail: {
//				            //the test named "testFail" should fail
//				            //testFail: true
//			            },
//    	 
//			            /*
//			             * Tests listed here should throw an error of some sort. If they throw an
//			             * error, then they are considered to have passed.
//			             */
//			            error: {
//				            /*
//				             * You can specify "true" for each test, in which case any error will
//				             * cause the test to pass.
//				             */
//				            testGenericError: true,
//            	 
//				            /*
//				             * You can specify an error message, in which case the test passes only
//				             * if the error thrown matches the given message.
//				             */
//				            "blackberry.app.setHomeScreenName() should throw an error":"java.lang.IllegalArgumentException: Required argument missing",
//				            "blackberry.app.setHomeScreenName(null) should throw an error": "java.lang.IllegalArgumentException: Argument is not nullable",
//            	            "blackberry.app.setHomeScreenName(undefined) should throw an error": "java.lang.IllegalArgumentException: Argument is not nullable",
//				            /*
//				             * You can also specify an error object, in which case the test passes only
//				             * if the error thrown is on the same type and has the same message.
//				             */
//				            testObjectError: new TypeError("Number expected."),
//				            testObjectError2: new TypeError("Number expected."),
//				            testObjectError3: new TypeError("Number expected.")
//            	        },
//            	 
//			            /*
//			             * Tests listed here should be ignored when the test case is run. For these tests,
//			             * setUp() and tearDown() are not called.
//			             */
//			            ignore : {
//				            // we don't have any test case to ignore here
//			            }
//                    },

//					"blackberry.app.setHomeScreenName should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.setHomeScreenName);
//					},
//                    
//                    "blackberry.app.setHomeScreenName should be a type of Function": function() {
//                        Assert.isFunction(blackberry.app.setHomeScreenName);
//                    },
//                     
//                    "blackberry.app.setHomeScreenName(name) should work correctly": function() {
//                        try{
//                            blackberry.app.setHomeScreenName("new name");
//                        }catch(e) {
//                            Assert.fail("blackberry.app.setHomeScreenName(name) failed.");
//                        }
//                    },
//                    // Negative test cases
//                    "blackberry.app.setHomeScreenName() should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenName();
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    },
//                    
//                    "blackberry.app.setHomeScreenName(null) should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenName(null);
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    },
//                    
//                    "blackberry.app.setHomeScreenName(undefined) should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenName(undefined);
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    }         
//                    
//                });
//                 
//                //---------------------------------------------------------------------
//                // Test method blackberry.app.setHomeScreenIcon
//                //---------------------------------------------------------------------
//                
//                testCases[13] = new Y.Test.Case({
//                    name: "blackberry.app.setHomeScreenIcon Test",
//					
//					//---------------------------------------------
//					// Setup and tear down
//					//---------------------------------------------
//				 
//					setUp : function () {
//						//Setup code goes here
//					},
//				 
//					tearDown : function () {
//						//Teardown code goes here
//					},
//					
//					/*
//                     * Specifies tests that "should" be doing something other than the expected.
//                     */
//                    _should: {
//     
//			            /*
//			             * Tests listed in here should fail, meaning that if they fail, the test
//			             * has passed. This is used mostly for YuiTest to test itself, but may
//			             * be helpful in other cases.
//			             */
//			            fail: {
//				            //the test named "testFail" should fail
//				            //testFail: true
//			            },
//    	 
//			            /*
//			             * Tests listed here should throw an error of some sort. If they throw an
//			             * error, then they are considered to have passed.
//			             */
//			            error: {
//				            /*
//				             * You can specify "true" for each test, in which case any error will
//				             * cause the test to pass.
//				             */
//				            //testGenericError: true,
//            	 
//				            /*
//				             * You can specify an error message, in which case the test passes only
//				             * if the error thrown matches the given message.
//				             */
//				            "blackberry.app.setHomeScreenIcon() should throw an error":"java.lang.IllegalArgumentException: Required argument missing",
//				            "blackberry.app.setHomeScreenIcon(null) should throw an error": "java.lang.IllegalArgumentException: Argument is not nullable",
//            	            "blackberry.app.setHomeScreenIcon(undefined) should throw an error": "java.lang.IllegalArgumentException: Argument is not nullable",
//				            /*
//				             * You can also specify an error object, in which case the test passes only
//				             * if the error thrown is on the same type and has the same message.
//				             */
//				            testObjectError: new TypeError("Number expected."),
//				            testObjectError2: new TypeError("Number expected."),
//				            testObjectError3: new TypeError("Number expected.")
//            	        },
//            	 
//			            /*
//			             * Tests listed here should be ignored when the test case is run. For these tests,
//			             * setUp() and tearDown() are not called.
//			             */
//			            ignore : {
//				            // we don't have any test case to ignore here
//			            }
//                    },

//					"blackberry.app.setHomeScreenIcon should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.setHomeScreenIcon);
//					},
//                    
//                    "blackberry.app.setHomeScreenIcon should be a type of Function": function() {
//                        Assert.isFunction(blackberry.app.setHomeScreenIcon);
//                    },
//                     
//                    "blackberry.app.setHomeScreenIcon(icon) should work correctly": function() {
//                        try{
//                            uri = "http://www.rim.com/images/layout/new_layout/topleft.gif";       
//                            blackberry.app.setHomeScreenIcon(uri);   
//                        }catch(e) {
//                            Assert.fail(" blackberry.app.setHomeScreenIcon(uri) failed.");
//                        }
//                    },
//                    // Negative test cases
//                    "blackberry.app.setHomeScreenIcon() should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenIcon();
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    },
//                    
//                    "blackberry.app.setHomeScreenIcon(null) should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenIcon(null);
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    },
//                    
//                    "blackberry.app.setHomeScreenIcon(undefined) should throw an error": function () {
//                        try{
//                            blackberry.app.setHomeScreenIcon(undefined);
//                        }catch(e){
//                           throw(new Error(e));
//                        }
//                    }         
//                    
//                });
//                
//                //---------------------------------------------------------------------
//                // Test method blackberry.app.exit
//                //---------------------------------------------------------------------
//                
//                testCases[14] = new Y.Test.Case({
//                    name: "blackberry.app.exit Test",
//					
//					//---------------------------------------------
//					// Setup and tear down
//					//---------------------------------------------
//				 
//					setUp : function () {
//						//Setup code goes here
//					},
//				 
//					tearDown : function () {
//						//Teardown code goes here
//					},
//					
//					"blackberry.app.exit should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.exit);
//					},
//                    
//                    "blackberry.app.exit should be a type of Function": function() {
//                        Assert.isFunction(blackberry.app.exit);
//                    }
//                });
//                
//				//---------------------------------------------------------------------
//                // Test method blackberry.app.requestBackground()
//                //---------------------------------------------------------------------
//                
//                testCases[15] = new Y.Test.Case({
//                    name: "blackberry.app.requestBackground Test",
//					
//					//---------------------------------------------
//					// Setup and tear down
//					//---------------------------------------------
//				 
//					setUp : function () {
//						//Setup code goes here
//					},
//				 
//					tearDown : function () {
//						//Teardown code goes here
//					},
//					
//					"blackberry.app.requestBackground should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.requestBackground);
//					},
//                    
//                    "blackberry.app.requestBackground should be a type of Function": function() {
//                        Assert.isFunction(blackberry.app.requestBackground);
//                    }
//                });
// 
//                //---------------------------------------------------------------------
//                // Test method blackberry.app.requestForeground()
//                //---------------------------------------------------------------------
//                
//                testCases[16] = new Y.Test.Case({
//                    name: "blackberry.app.requestForeground Test",
//					
//					//---------------------------------------------
//					// Setup and tear down
//					//---------------------------------------------
//				 
//					setUp : function () {
//						//Setup code goes here
//					},
//				 
//					tearDown : function () {
//						//Teardown code goes here
//					},
//					
//					"blackberry.app.requestForeground should exist" : function() {
//						Assert.isNotUndefined(blackberry.app.requestForeground);
//					},
//                    
//                    "blackberry.app.requestForeground should be a type of Function": function() {
//                        Assert.isFunction(blackberry.app.requestForeground);
//                    }
//                });

                
                
                return testCases;
            }
        </script>
    </head>
    <body>
        <div id="output" />
    </body>
</html>