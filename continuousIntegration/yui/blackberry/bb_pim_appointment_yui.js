(function() {
    var framework = YUI.framework;
	framework.setupFramework(generateTestCaseCallback);

    //We're passing in the Y parameter and expecting back an array of test cases
    function generateTestCaseCallback(Y) {
        var testCases = new Array();
        var Assert = Y.Assert;
		var testAppointment;
			
        testCases[0] = new Y.Test.Case({
            name: "blackberry.pim.Appointment Tests",
			
			/*
			 * Appointment should be testing Appointment, Attendee, Recurrence, Reminder and find
			 */
			
			setUp : function () {
				testAppointment = new blackberry.pim.Appointment();
			},
			
			"blackberry.pim.Appointment should exist" : function() {
				Assert.isNotUndefined(blackberry.pim.Appointment);
			},
			
			"blackberry.pim.Appointment.FREE should exist" : function() {
				Assert.isNotUndefined(blackberry.pim.Appointment.FREE);
			},
			
			"blackberry.pim.Appointment.TENTATIVE should exist" : function() {
				Assert.isNotUndefined(blackberry.pim.Appointment.TENTATIVE);
			},
			
			"blackberry.pim.Appointment.BUSY should exist" : function() {
				Assert.isNotUndefined(blackberry.pim.Appointment.BUSY);
			},
			
			"blackberry.pim.Appointment.OUT_OF_OFFICE should exist" : function() {
				Assert.isNotUndefined(blackberry.pim.Appointment.OUT_OF_OFFICE);
			},
			
			"blackberry.pim.Appointment.allDay should exist" : function() {
				Assert.isNotUndefined(testAppointment.allDay);
				Assert.isBoolean(testAppointment.allDay)
			},
			
			"blackberry.pim.Appointment.attendees should exist" : function() {
				Assert.isNotUndefined(testAppointment.attendees);
			},
			
			"blackberry.pim.Appointment.end should exist" : function() {
				Assert.isNotUndefined(testAppointment.end);				
			},
			
			"blackberry.pim.Appointment.freeBusy should exist" : function() {
				Assert.isNotUndefined(testAppointment.freeBusy);
				Assert.isNumber(testAppointment.freeBusy);
			},
			
			"blackberry.pim.Appointment.location should exist" : function() {
				Assert.isNotUndefined(testAppointment.location);
				Assert.isString(testAppointment.location);
			},
			
			"blackberry.pim.Appointment.note should exist" : function() {
				Assert.isNotUndefined(testAppointment.note);
				Assert.isString(testAppointment.note);
			},
			
			"blackberry.pim.Appointment.recurrence should exist" : function() {
				Assert.isNotUndefined(testAppointment.recurrence);
			},
			
			"blackberry.pim.Appointment.reminder should exist" : function() {
				Assert.isNotUndefined(testAppointment.reminder);
			},
			
			"blackberry.pim.Appointment.start should exist" : function() {
				Assert.isNotUndefined(testAppointment.start);
			},
			
			"blackberry.pim.Appointment.summary should exist" : function() {
				Assert.isNotUndefined(testAppointment.summary);
				Assert.isString(testAppointment.summary);
			},
			
			"blackberry.pim.Appointment.uid should exist" : function() {
				Assert.isNotUndefined(testAppointment.uid);
				Assert.isString(testAppointment.uid);
			},
			
			"blackberry.pim.Appointment.remove should exist" : function() {
				Assert.isNotUndefined(testAppointment.remove);
			},
			
			"blackberry.pim.Appointment.save should exist" : function() {
				Assert.isNotUndefined(testAppointment.save);
			},
			
			//Create/Save Full Appointment
			"blackberry.pim.Appointment.save should create and save an appointment" : function() {
				var totalAppointments = blackberry.pim.Appointment.find().length;
				
				var newAppt = new blackberry.pim.Appointment();
				newAppt.location = "AutoGenerated:Your office";
				newAppt.summary = "AutoGenerated:Talk about new project";
				newAppt.note = "Sample Note";      

				//Create our hour time slot
				var start = new Date();
				start.setHours(start.getHours() + 5);
				var end = new Date();
				end.setHours(end.getHours() + 7);
				newAppt.start = start;
				newAppt.end = end;
				newAppt.recurrence = new blackberry.pim.Recurrence();
				newAppt.recurrence.frequency = blackberry.pim.Recurrence.DAILY;     
				newAppt.recurrence.interval =  2;    
				var _date = new Date();
				_date.setFullYear(2012, 10, 1);
				newAppt.recurrence.end = _date;
			   
				//Set reminder
				var _reminder = new blackberry.pim.Reminder();
				//RELATIVE; DATE;
				_reminder.type = blackberry.pim.Reminder.RELATIVE;
				_reminder.relativeHours = 0.25;  
				newAppt.reminder = _reminder;
				
				//Create Attendee
				var attendees = new Array();
				
				var _attendee = new blackberry.pim.Attendee();
				_attendee.address = "rhan@rim.com";
				//INVITED;ACCEPTED;DECLINED;TENTATIVE;
				_attendee.type = blackberry.pim.Attendee.ORGANIZER;

				var _attendee2 = new blackberry.pim.Attendee();
				_attendee2.address = "rhan2@rim.com";
				_attendee2.type =  blackberry.pim.Attendee.INVITED;
			   
				attendees.push(_attendee);
				attendees.push(_attendee2);
				newAppt.attendees = attendees;
				newAppt.freeBusy = blackberry.pim.Appointment.FREE;
				newAppt.allDay = false; // what will happen if we set it true and use the time slot?
				newAppt.save();				
				
				Assert.isTrue(newAppt.uid != "" && newAppt.uid != undefined);
				Assert.areSame(totalAppointments + 1, blackberry.pim.Appointment.find().length);
			},
			
			//Modify Appointment
			"blackberry.pim.Appointment.save should be able to modify an existing appointment" : function() {
				var newAppt = new blackberry.pim.Appointment();
				newAppt.summary = "Appointment Summary";
				newAppt.freeBusy = blackberry.pim.Appointment.FREE;
				newAppt.save();
				
				newAppt.summary = "Modified Appointment Summary";
				newAppt.freeBusy = blackberry.pim.Appointment.BUSY;
				newAppt.save();
				
				var fe = new blackberry.find.FilterExpression("uid", "==", newAppt.uid);
				var res = blackberry.pim.Appointment.find(fe); //Returns 1 item array
				
				Assert.areSame(1, res.length);
				Assert.areSame("Modified Appointment Summary", res[0].summary);
				Assert.areSame(blackberry.pim.Appointment.BUSY, res[0].freeBusy);
			},
			
			//Remove Appointment
			"blackberry.pim.Appointment.remove should delete an existing appointment" : function() {
				var newAppt = new blackberry.pim.Appointment();
				newAppt.summary = "Appointment Summary";
				newAppt.freeBusy = blackberry.pim.Appointment.FREE;
				newAppt.save();
				var totalAppointments = blackberry.pim.Appointment.find().length;
				newAppt.remove();
				
				var fe = new blackberry.find.FilterExpression("uid", "==", newAppt.uid);
				var res = blackberry.pim.Appointment.find(fe); //Returns 0 item array
				
				Assert.areSame(0, res.length);
				Assert.areSame(totalAppointments - 1, blackberry.pim.Appointment.find().length);
			},
			
			//Attendee Tests
			"blackberry.pim.Appointment.attendees should have attendees in it" : function() {
				var obj = new blackberry.pim.Appointment();

				var attendees = new Array();
				var onlyAttendee = new blackberry.pim.Attendee();
				onlyAttendee.address = "wicasvv51@devlab2k.testnet.rim.net";
				onlyAttendee.type = 1; // Invited
				attendees.push(onlyAttendee);

				obj.attendees = attendees;
				obj.save();

				Assert.isNotUndefined(obj.attendees);
				Assert.areSame("wicasvv51@devlab2k.testnet.rim.net", obj.attendees[0].address);
				Assert.areSame(1, obj.attendees[0].type);
				
				//Additional Test: checking for undefined in attendee type when using Appointment.find
				//This is due to a constraints on internal APIs where we cannot get the type from find
				var filter = new blackberry.find.FilterExpression("uid", "==", obj.uid);
				var res = blackberry.pim.Appointment.find(filter);
				
				Assert.areSame(1, res.length);
				Assert.areSame(1, res[0].attendees.length);
				Assert.isUndefined(res[0].attendees[0].type);
			},
			
			//Recurrence Tests
			"blackberry.pim.Appointment.recurrence should have recurrence object" : function() {
				var obj = new blackberry.pim.Appointment();

				var endRecur = new Date();
				endRecur.setFullYear(2009);
				endRecur.setMonth(11);
				endRecur.setDate(31);
				
				obj.recurrence = new blackberry.pim.Recurrence();
				obj.recurrence.frequency = 1;
				obj.recurrence.interval = 10;
				obj.recurrence.end = endRecur;

				Assert.isNotUndefined(obj.recurrence);
				Assert.areSame(1, obj.recurrence.frequency);
				Assert.areSame(10, obj.recurrence.interval);
				//Assert.areSame(obj.recurrence.end, endRecur);
			},
			
			//Reminder Tests
			"blackberry.pim.Appointment.reminder should have reminder object" : function() {
				var obj = new blackberry.pim.Appointment();
				
				var remind = new blackberry.pim.Reminder();
				remind.type = blackberry.pim.Reminder.RELATIVE;
				remind.relativeHours = 0.25;  
				obj.reminder = remind;
				
				Assert.isNotUndefined(obj.reminder);
				Assert.areSame(blackberry.pim.Reminder.RELATIVE, obj.reminder.type);
				Assert.areSame(0.25, obj.reminder.relativeHours);			
			},
			
			//find Tests
			"blackberry.pim.Appointment.find should return filtered searches" : function() {			
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].location == "test_find_with_filter" || appts[i].location == "somewhere")
						appts[i].remove();					
				}
				
				//Create two appointments for testing	
				var obj = new blackberry.pim.Appointment();
				obj.location = "test_find_with_filter";
				obj.summary = "test_find_with_filter";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;		
				obj.save();
				
				var obj2 = new blackberry.pim.Appointment();
				obj2.location = "somewhere";
				obj2.summary = "somewhere";
				var start2 = new Date();
				obj2.start = start2;
				var end2 = new Date();
				obj2.end = end2;
				obj2.save();
				
				//Create filter for testing
				var location_filter = new blackberry.find.FilterExpression("location", "==", "test_find_with_filter");	
				var summary_filter = new blackberry.find.FilterExpression("summary", "==", "test_find_with_filter");	
				var AND1 = new blackberry.find.FilterExpression(location_filter, "AND", summary_filter);
				/*
				var start_filter = new blackberry.find.FilterExpression("start", "==", start.);
				var end_filter = new blackberry.find.FilterExpression("end", "==", end);	
				var AND2 = new blackberry.find.FilterExpression(start_filter, "AND", end_filter);
				var AND3 = new blackberry.find.FilterExpression(AND1, "AND", AND2);				
				*/
				var allAppointment = blackberry.pim.Appointment.find(AND1);
				
				Assert.areSame(1, allAppointment.length);
				Assert.areSame("test_find_with_filter", allAppointment[0].summary);
				Assert.areSame(start.getTime(), allAppointment[0].start.getTime());
				Assert.areSame(end.getTime(), allAppointment[0].end.getTime());
				//Assert.areSame(allAppointment[1].summary, "test_find_with_filter");
				//Assert.areSame(allAppointment[1].start.getTime(), start.getTime());
				//Assert.areSame(allAppointment[1].end.getTime(), end.getTime());

				obj.remove();
				obj2.remove();
			},
			
			"blackberry.pim.Appointment.find should find negated filter" : function() {
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].location == "test_find_with_filter" || appts[i].location == "somewhere")
						appts[i].remove();					
				}
			
				//Create two appointments for testing	
				var obj = new blackberry.pim.Appointment();
				obj.location = "test_find_with_filter";
				obj.summary = "test_find_with_filter";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;				
				obj.save();
				
				var obj2 = new blackberry.pim.Appointment();
				obj2.location = "somewhere";
				obj2.summary = "somewhere";
				var start2 = new Date();
				obj2.start = start2;
				var end2 = new Date();
				obj2.end = end2;
				obj2.save();			
				
				//Create filter for testing
				var location_filter = new blackberry.find.FilterExpression("location", "!=", "test_find_with_filter",true);	
				var summary_filter = new blackberry.find.FilterExpression("summary", "!=", "test_find_with_filter",true);	
				var AND1 = new blackberry.find.FilterExpression(location_filter, "AND", summary_filter);
				/*
				var start_filter = new blackberry.find.FilterExpression("start", "==", start);				
				var end_filter = new blackberry.find.FilterExpression("end", "==", end);	
				var AND2 = new blackberry.find.FilterExpression(start_filter, "AND", end_filter);
				var AND3 = new blackberry.find.FilterExpression(AND1, "AND", AND2);
				*/
				var allAppointment = blackberry.pim.Appointment.find(AND1);
				
				//Assert.areNotEqual(0, allAppointment.length);
				Assert.areSame(1, allAppointment.length);
				Assert.areSame("test_find_with_filter", allAppointment[0].summary);
				Assert.areSame(start.getTime(), allAppointment[0].start.getTime());
				Assert.areSame(end.getTime(), allAppointment[0].end.getTime());
				//Assert.areSame("test_find_with_filter", allAppointment[1].summary);
				//Assert.areSame(start.getTime(), allAppointment[1].start.getTime());
				//Assert.areSame(end.getTime(), allAppointment[1].end.getTime());
			},
			
			"blackberry.pim.Appointment.find should find all" : function() {
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].location == "test_find_all_appointment" || appts[i].summary == "test_find_all_appointment")
						appts[i].remove();					
				}
				
				//Create a new appointment for testing
				var obj = new blackberry.pim.Appointment();				
				obj.location = "test_find_all_appointment";
				obj.summary = "test_find_all_appointment";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;
				obj.save();
				
				//Find all appointment				
				var allAppointment = blackberry.pim.Appointment.find();				
				Assert.areNotSame(allAppointment.length, 0);				
				
				var found=false;
				var item;
				
				//alert(allAppointment.length);
				for(var i=0; i<allAppointment.length; i++) {	
					if(allAppointment[i].location == "test_find_all_appointment") {
						item = allAppointment[i];
						found = true;
						break;
					}
				}
				
				if (!found) {
					Y.Assert.fail("Appointment was not found via all find");
				}
				
				Assert.areSame("test_find_all_appointment", item.summary);
				Assert.areSame("test_find_all_appointment", item.location);
				//Assert.areSame(start.getTime(), item.start.getTime()); //Times are off a bit when comparing and I don't know why
				//Assert.areSame(end.getTime(), item.end.getTime());
			},
			
			"blackberry.pim.Appointment.find should return proper MaxReturn result" : function() {
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].location == "test_find_all_appointment" || appts[i].summary == "test_find_all_appointment")
						appts[i].remove();					
				}
			
				//Create a new appointment for testing
				var obj = new blackberry.pim.Appointment();				
				obj.location = "test_find_all_appointment";
				obj.summary = "test_find_all_appointment";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;
				obj.save();
	  
				var obj2 = new blackberry.pim.Appointment();				
				obj2.location = "test_find_all_appointment";
				obj2.summary = "test_find_all_appointment";
				var start2 = new Date();
				obj2.start = start2;
				var end2 = new Date();
				obj2.end = end2;
				obj2.save();
				
				//Find all appointment
				var allAppointment = blackberry.pim.Appointment.find(null,"",1);
				Assert.isNotUndefined(allAppointment);
				Assert.areSame(1, allAppointment.length);
			},
			
			"blackberry.pim.Appointment.find should order in descending order" : function() {
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].summary="Test summary")
						appts[i].remove();					
				}
              
				//Create a new appointment for testing
				var obj = new blackberry.pim.Appointment();					
				obj.location = "a: first instance";
				obj.summary = "Test summary";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;
				obj.save();					
          
				var obj3 = new blackberry.pim.Appointment();					
				obj3.location = "c: third instance";
				obj3.summary = "Test summary";
				var start3 = new Date();
				obj3.start = start3;
				var end3 = new Date();
				obj3.end = end3;
				obj3.save();
            
				var obj2 = new blackberry.pim.Appointment();				
				obj2.location = "b: second instance";
				obj2.summary = "Test summary";
				var start2 = new Date();
				obj2.start = start2;
				var end2 = new Date();
				obj2.end = end2;
				obj2.save();
            
				//Find all appointments
				var filter = new blackberry.find.FilterExpression("summary", "==", "Test summary");
				var allAppointment = blackberry.pim.Appointment.find(filter,"location",10,null,false);
				
				Assert.isNotUndefined(allAppointment);				
				Assert.areSame(3, allAppointment.length);
				Assert.areSame("c: third instance", allAppointment[0].location);
				Assert.areSame("b: second instance", allAppointment[1].location);
				Assert.areSame("a: first instance", allAppointment[2].location);
			},
			
			"blackberry.pim.Appointment.find should order in ascending order" : function() {
				var appts = blackberry.pim.Appointment.find();          
				for (var i = 0; i<appts.length;i++) {
					if (appts[i].summary="Test summary")
						appts[i].remove();					
				}
            
				//Create a new appointment for testing
				var obj = new blackberry.pim.Appointment();					
				obj.location = "a: first instance";
				obj.summary = "Test summary";
				var start = new Date();
				obj.start = start;
				var end = new Date();
				obj.end = end;
				obj.save();			
          
				var obj3 = new blackberry.pim.Appointment();					
				obj3.location = "c: third instance";
				obj3.summary = "Test summary";
				var start = new Date();
				obj3.start = start;
				var end = new Date();
				obj3.end = end;
				obj3.save();                   
          
				var obj2 = new blackberry.pim.Appointment();					
				obj2.location = "b: second instance";
				obj2.summary = "Test summary";
				var start = new Date();
				obj2.start = start;
				var end = new Date();
				obj2.end = end;
				obj2.save();
         
				//Find all appointments
				var filter = new blackberry.find.FilterExpression("summary", "==", "Test summary");
				var allAppointment = blackberry.pim.Appointment.find(filter,"location",10,null,true);
				
				Assert.isNotUndefined(allAppointment);
				Assert.areSame(3, allAppointment.length);
				Assert.areSame("a: first instance", allAppointment[0].location);
				Assert.areSame("b: second instance", allAppointment[1].location);
				Assert.areSame("c: third instance", allAppointment[2].location);
			},
			
			
        });
        
        return testCases;
    }
})();